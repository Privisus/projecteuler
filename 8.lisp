(defvar the_number 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450)

(defvar max_sum 0)

(defun grab_digits (huge_number amount pos)
  "Returns a slice of digits from a huge number"
  (let ((str_number (write-to-string huge_number)))
       (if (< (- (length str_number) 
		 (- pos 1)) 
	      amount) 
	   (return-from grab_digits 0))
       (let ((str_sliced (subseq str_number (- pos 1) (+ (- pos 1) amount))))
	    (when (find #\0 str_sliced) (return-from grab_digits 0)) 
	    (return-from grab_digits (parse-integer str_sliced)))))

(defun digit_list (n)
  "Returns 123 to (1 2 3)"
  (let* ((temp_list (list 1)) digit (string_number (write-to-string n)))
    (loop for index from 0 to (- (length string_number) 1) do
	  (setf digit (parse-integer (subseq string_number index (+ index 1))))
	  (setf temp_list (append temp_list (list digit))))
    (return-from digit_list temp_list)))

(defun product_list (number_list)
  (let ((product 1))
       (loop for k in number_list do
	     (setf product (* product k)))
       (return-from product_list product)))

(defun product_digit (digits)
  (product_list (digit_list digits)))

(loop for index from 1 to 988 do
      (let ((digits (grab_digits the_number 13 index)))
	   (setf max_sum (max max_sum (product_digit digits)))))

(format t "~d ~%" max_sum)
